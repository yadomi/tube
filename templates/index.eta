<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Tube</title>
  <style type="text/css">
    :root {
      --body-bg-color: #f6f6ef;
      --body-text-color: #333;
      --article-bg-color: #d9d9d9;
      --article-text-color: #333;
      --article-visited-color: #828282;
      --article-meta-color: #828282;
      --thumbnail-height: 112px;
      --title-padding-bottom: 12px;
      --title-font-size: 20px;
      --meta-font-size: 16px;
      --article-margin-bottom: 16px;
    }

    [id="ui-dark"]:checked ~ main {
      --body-bg-color: #020202;
      --body-text-color: #e0e0e0;
      --article-bg-color: #0b0b0b;
      --article-text-color: #e0e0e0;
      --article-visited-color: #444444;
      --article-meta-color: #777;
    }

    [id="ui-compact"]:checked ~ main {
      --thumbnail-height: 64px;
      --title-padding-bottom: 4px;
      --title-font-size: 14px;
      --meta-font-size: 10px;
      --article-margin-bottom: 6px;
    }

    body > input[type="checkbox"] {
      display: none
    }

    html, body {
      height: 100%;
    }

    main {
      background-color: var(--body-bg-color);
      color: var(--body-text-color);
      padding: 0 10%;
      flex: 1;
    }

    @media (orientation: portrait) {
      main {
        padding: 0 8px;
      }
    }

    body {
      font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
    }

    main > h1 {
      font-size: 0.9em;
      font-weight: normal;
      padding-top: 12px;
      padding-bottom: 12px;
      margin: 0;
      text-transform: lowercase;
    }

    .article:hover {
      background-color: var(--article-bg-color);
    }

    .article {
      border-radius: 4px;
      display: grid;
      grid-template-columns: calc(var(--thumbnail-height) * 2) 1fr;
      transition: grid-template-columns .2s ease;
      grid-template-rows: auto 1fr;
      gap: 0px 0px;
      grid-auto-flow: row;
      grid-template-areas:
        "thumbnail title"
        "thumbnail meta";
      margin-bottom: var(--article-margin-bottom);
      text-decoration: none;
    }

    .article h2 {
      color: var(--article-text-color);
      padding-bottom: var(--title-padding-bottom);
      text-decoration: none;
      font-size: var(--title-font-size);
      margin: 0;
      display: flex;
      font-weight: normal;
      grid-area: title;
    }

    .article:visited h2 {
      color: var(--article-visited-color) !important;
    }

    .article span {
      font-size: var(--meta-font-size);
      grid-area: meta;
      color: var(--article-meta-color);
    }

    .article img {
      grid-area: thumbnail;
      display: flex;
      height: var(--thumbnail-height);
      width: calc(var(--thumbnail-height) * (16/9));
      transition: width .2s ease, height .2s ease;
      object-fit: cover;
      border-radius: 4px;
    }

    aside {
      font-size: 10px;
      position: fixed;
      bottom: 4px;
      left: 4px;
    }

    section.menu {
      display: flex;
      position: fixed;
      bottom: 4px;
      right: 4px;

    }
    section.menu label, section.menu a {
      text-decoration: none;
      border: none;
      background: none;
      font-size: 10px;
      display: flex;
      color: var(--body-text-color);
      padding: 0 8px;
      cursor: pointer;
      line-height: normal;
      width: auto;
      margin: 0;
    }
  </style>
</head>

<body>
  <input type="checkbox" id="ui-dark"/>
  <input type="checkbox" id="ui-compact"/>
  <main>
    <section class="menu">
      <form><label for="ui-dark">dark</label></form>
      <form><label for="ui-compact">compact</label></form>
      <a href="/manage">manage</a>
    </section>
    <aside><%= new Date().toLocaleString(it.settings.LOCALE) %></aside>
    <%
      let previousDate = null;

      for (let item of it.data) {
        const now = new Date()
        const publishedAt = new Date(item.published_at);

        const diffInHours = Math.floor((now - publishedAt) / (1000 * 60 * 60));
        const diffInMinutes = Math.floor((now - publishedAt) / (1000 * 60));

        const relativeUnit = diffInHours < 1 ? 'minutes' : 'hours';
        const relativeTime = { minutes: diffInMinutes, hours: diffInHours }[relativeUnit];

        const rtf = new Intl.RelativeTimeFormat(it.settings.LOCALE, { localeMatcher: "best fit", numeric: "always", style: "long" })
        if (previousDate !== publishedAt.getDay()) {
    %>

    <h1>
      <%= publishedAt.toLocaleDateString(it.settings.LOCALE, { weekday: 'short', month: 'short', day: 'numeric' }) %>
    </h1>

    <%
          previousDate = publishedAt.getDay();
        }
    %>

    <a class="article" target="_blank" href="<%= item.link %>">
      <img loading="lazy" src="<%= item.thumbnail %>" alt="" />
      <h2>
        <%= item.title %>
      </h2>
      <span>
        <%= item.author.name %> -
        <span title="<%= publishedAt.toLocaleString(it.settings.LOCALE) %>"><%= rtf.format(relativeTime * -1, relativeUnit) %></span>
      </span>
    </a>
    <% } %>
  </main>

  <script type="text/javascript">
    (() => {
      const url = new URL(window.location)

      for (const [k] of url.searchParams) {
        const e = document.getElementById(k)
        if (e) e.checked = true
      }


      document.addEventListener('change', event => {
        if (event.target.id.startsWith('ui')) {

          const value = url.searchParams.get(event.target.id)
          value
            ? url.searchParams.delete(event.target.id)
            : url.searchParams.set(event.target.id, 1)

          history.pushState({}, "", url);
        }
      })
    })()
  </script>
</body>

</html>
